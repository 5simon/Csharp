using System;
using System.Threading;
using System.IO;

namespace Lesson6
{
    class Computer
    {
        //Access modifiers (Zugriffsmodifizierer):
        //public / private
        //private is default!

        // 1.) Fields (variables inside classes)
        // public fields are bad code style!
        private string userNameField;
        private byte[] ipAddressBytes;

        //Static field: One random number generator for all computers
        private static Random rand = new Random();

        // 1.5) Properties
        // "Methods that look like fields ..."
        public string UserName
        {
            //Accessors:
            //"Getter method" of the property
            get
            {
                return userNameField;
            }

            //Only a getter => property read-only
        }

        //Automatic property for "crash state":
        public bool HasCrashed
        {
            //Using "get / set" without method body:
            //Property is automatic => private field is generated by compiler
            get;
            set;
        }

        public string IPAddress
        {
            get
            {
                //TODO:
                //Return string representation of private "ipAddressBytes" field.
                return IPTools.IPAddressToString(ipAddressBytes);
            }

            set
            {
                //TODO:
                //Convert "value" to byte array and write it to "ipAddressBytes" field.
                ipAddressBytes = IPTools.StringToIPAddress(value);
            }
        }


        // 2.) Methods (functions inside classes)
        //Methods can access fields of their own class!

        //Constructor:
        //No return type
        //Name = name of class
        public Computer()
        {
            userNameField = "Administrator";
            HasCrashed = false;
            ipAddressBytes = IPTools.LocalHostBytes;
        }

        public static void PrintHelloWorld()
        {
            Console.WriteLine("Hello World!");
        }

        public void ChangeUser(string newUserName)
        {
            Console.WriteLine("Logging out ...");
            Thread.Sleep(1000); //using System.Threading;

            Console.WriteLine("Logging in as {0} ...", newUserName);
            userNameField = newUserName;
        }

        public void SaveFile(string filePath, string fileName)
        {
            //If the computer is in the "crashed state",
            //we immediately throw an exception:
            if (HasCrashed)
            {
                throw new InvalidOperationException("Computer has already crashed!");
            }

            //using System.IO
            string newPath = Path.Combine(filePath, fileName);
            Console.WriteLine("Saving file: {0}", newPath);
            Thread.Sleep(500);

            //Test for a crash:
            int num = rand.Next(1, 5);

            if (num == 2)
            {
                HasCrashed = true;
                throw new InvalidOperationException("Computer crashed while saving the file!");
            }
        }

        public void Reboot()
        {
            Console.WriteLine("Rebooting ...");
            Thread.Sleep(2000);
            HasCrashed = false;
        }

        //Overload "SaveFile(...)":
        public void SaveFile(string fileName)
        {
            string newPath = Path.Combine(@"C:\Users", UserName, "Desktop");
            SaveFile(newPath, fileName);
        }

        public void BurnDVD(string label, string content, out DVD dvd)
        {
            dvd = new DVD(label, content);
        }

        public void Print()
        {
            Console.WriteLine("Computer {{ User = {0}, IP-Adresse = {1}, Crashed = {2} }}", UserName, IPAddress, HasCrashed);
        }
    }
}
